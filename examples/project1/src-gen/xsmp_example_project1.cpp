// Copyright 2023 YOUR ORGANIZATION. All rights reserved.
// 
// YOUR NOTICE

// -----------------------------------------------------------------------------
// File Name    : xsmp_example_project1.cpp
// Generated by : XsmpSdkGenerator-${qualifiedVersion}
// -----------------------------------------------------------------------------
/// @file xsmp_example_project1.cpp
// This file is auto-generated, Do not edit otherwise your changes will be lost

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include "Example/M1.h"
#include "Xsmp/Factory.h"
#include "xsmp_example_project1.h"
#include <unordered_set>

// ----------------------------------------------------------------------------------
// ----------------------------- Global variables ------------------------------
// ----------------------------------------------------------------------------------

namespace {
/// Simulators set.
std::unordered_set<::Smp::ISimulator*> simulators { };
} // namespace

// --------------------------------------------------------------------------------
// --------------------------- Initialise Function -----------------------------
// --------------------------------------------------------------------------------

extern "C" {
/// Initialise Package xsmp_example_project1.
/// @param simulator Simulator for registration of factories.
/// @param typeRegistry Type Registry for registration of types.
/// @return True if initialisation was successful, false otherwise.
bool Initialise_xsmp_example_project1(::Smp::ISimulator *simulator,
        [[maybe_unused]] ::Smp::Publication::ITypeRegistry *typeRegistry) {
    // check simulator validity
    if (!simulator) {
        return false;
    }
    // avoid double initialisation
    else if (!::simulators.emplace(simulator).second) {
        return true;
    }

    // Register factory for Model M1
    simulator->RegisterFactory(::Xsmp::Factory::Create < ::Example::M1 > ("M1", // name
    "", // description
    simulator, // simulator
    ::Example::Uuid_M1 // UUID
            ));

    return true;
}

}

// ---------------------------------------------------------------------------------
// ---------------------------- Finalise Function ------------------------------
// ---------------------------------------------------------------------------------

extern "C" {
/// Finalise Package xsmp_example_project1.
/// @param simulator Simulator.
/// @return True if finalisation was successful, false otherwise.
bool Finalise_xsmp_example_project1(::Smp::ISimulator *simulator) {
    // backward compatibility
    if (!simulator) {
        ::simulators.clear();
    }
    // avoid double finalisation
    else if (!::simulators.erase(simulator)) {
        return true;
    }

    return true;
}
}

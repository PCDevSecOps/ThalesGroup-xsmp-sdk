// Copyright 2023 YOUR ORGANIZATION. All rights reserved.
// 
// YOUR NOTICE

// -----------------------------------------------------------------------------
// File Name    : M1Gen.cpp
// Generated by : XsmpSdkGenerator-${qualifiedVersion}
// -----------------------------------------------------------------------------
/// @file Example/M1Gen.cpp
// This file is auto-generated, Do not edit otherwise your changes will be lost

// ----------------------------------------------------------------------------
// ---------------------------- Include Header Files --------------------
// ----------------------------------------------------------------------------

#include "Example/M1.h"
#include "Smp/IPublication.h"
#include "Xsmp/ComponentHelper.h"

namespace Example {
//--------------------------- Constructor -------------------------
M1Gen::M1Gen(::Smp::String8 name, ::Smp::String8 description,
        ::Smp::IObject *parent, ::Smp::ISimulator *simulator) :
        // Base class initialization
        ::Xsmp::Model(name, description, parent, simulator),
        // integer1 initialization
        integer1 { },
        // integer2 initialization
        integer2 { },
        // Container: subModels
        subModels { new ::Xsmp::Container<::Example::M1>("subModels", "", this,
                0, -1) } {
}

/// Virtual destructor that is called by inherited classes as well.
M1Gen::~M1Gen() {
    delete subModels;
    subModels = nullptr;
}

void M1Gen::Publish(::Smp::IPublication *receiver) {
    // Call parent class implementation first
    ::Xsmp::Model::Publish(receiver);

    // Publish field integer1
    receiver->PublishField("integer1", "", &integer1, ::Smp::ViewKind::VK_None,
            true, false, false);
    // Publish field integer2
    receiver->PublishField("integer2", "", &integer2, ::Smp::ViewKind::VK_None,
            true, false, false);
    // Call user DoPublish if any
    ::Xsmp::Component::Helper::Publish < ::Example::M1 > (this, receiver);
}

void M1Gen::Configure(::Smp::Services::ILogger *logger,
        ::Smp::Services::ILinkRegistry *linkRegistry) {
    // Call parent implementation first
    ::Xsmp::Model::Configure(logger, linkRegistry);

    // Call user DoConfigure if any
    ::Xsmp::Component::Helper::Configure < ::Example::M1
            > (this, logger, linkRegistry);
}

void M1Gen::Connect(::Smp::ISimulator *simulator) {
    // Call parent implementation first
    ::Xsmp::Model::Connect(simulator);

    // Call user DoConnect if any
    ::Xsmp::Component::Helper::Connect < ::Example::M1 > (this, simulator);
}

void M1Gen::Disconnect() {
    // Call user DoDisconnect if any
    ::Xsmp::Component::Helper::Disconnect < ::Example::M1 > (this);

    // Call parent implementation last, to remove references to the Simulator and its services
    ::Xsmp::Model::Disconnect();
}

const Smp::Uuid& M1Gen::GetUuid() const {
    return Uuid_M1;
}
} // namespace Example
